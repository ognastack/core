x-kong-config: &kong-env
  KONG_DATABASE: postgres # Use Postgres as the backing database
  KONG_PG_HOST: ogna-database # Hostname of the Postgres service
  KONG_PG_DATABASE: ${POSTGRES_DB} # Name of the database to connect to
  KONG_PG_USER: ${POSTGRES_USER} # Database username
  KONG_PG_PASSWORD: ${POSTGRES_PASSWORD} # Database password

services:
  kong-bootstrap:
    image: kong/kong-gateway:3.12.0.0 # Kong Gateway image (default to latest version)
    container_name: kong-bootstrap
    networks:
      - ogna
    depends_on:
      ogna-database:
        condition: service_healthy
    restart: on-failure
    environment:
      <<: *kong-env # Reuse environment config from x-kong-config
      KONG_PASSWORD: handyshake # Admin GUI password (required for RBAC)
    command: kong migrations bootstrap # Run DB migrations to initialize Kong schema

  kong-cp:
    image: kong/kong-gateway:3.12.0.0
    container_name: kong-cp
    restart: unless-stopped
    networks:
      - ogna
    environment:
      <<: *kong-env
      KONG_PLUGINS: bundled,cors,acme
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: system
      KONG_NGINX_HTTP_LUA_SHARED_DICT: acme_storage 10m
      # Logging (optional but recommended)
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: ${KONG_LOG_LEVEL:-notice}
    depends_on:
      kong-bootstrap:
        condition: service_completed_successfully
      ogna-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s # Give Kong time to start
    ports:
      - "80:8000"
      - "443:8443"
    volumes:
      - ./config/kong.yaml:/kong/kong.yaml:ro
      - ./acme:/usr/local/kong/acme
    env_file:
      - .env

  gotrue:
    image: bitnamilegacy/gotrue:2.178.0
    platform: linux/amd64
    environment:
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_MAILER_AUTOCONFIRM: true
      MAILER_AUTOCONFIRM: true
      GOTRUE_API_HOST: "0.0.0.0"
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: "postgres"
      GOTRUE_JWT_AUD: "authenticated"
      GOTRUE_JWT_DEFAULT_GROUP_NAME: "authenticated"
      GOTRUE_SITE_URL: "http://localhost"
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@ogna-database:5432/${POSTGRES_DB}?search_path=auth"
    expose:
      - "9999"
    depends_on:
      ogna-database:
        condition: service_healthy
    networks:
      - ogna
    env_file:
      - .env

  ogna-database:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init:/docker-entrypoint-initdb.d
    expose:
      - "5432"
    networks:
      - ogna
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-ogna_user} -d ${POSTGRES_DB:-ogna_db}",
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    env_file:
      - .env

  flyway:
    image: flyway/flyway:10
    container_name: flyway_migrate
    depends_on:
      ogna-database:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://ogna-database:5432/${POSTGRES_DB}
      -user=${POSTGRES_USER}
      -password=${POSTGRES_PASSWORD}
      -schemas=migrations migrate
    networks:
      - ogna
    volumes:
      - ./migrations/post:/flyway/sql
    restart: on-failure:20
    env_file:
      - .env

volumes:
  postgres_data:
    driver: local

networks:
  ogna:
    driver: bridge
